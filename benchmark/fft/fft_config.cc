#include "benchmark/fft/fft_config.h"

#include <string>

#include "absl/strings/substitute.h"

#include "tachyon/base/console/iostream.h"
#include "tachyon/base/containers/container_util.h"
#include "tachyon/base/flag/flag_parser.h"
#include "tachyon/base/ranges/algorithm.h"

namespace tachyon {
namespace base {

template <>
class FlagValueTraits<FFTConfig::Vendor> {
 public:
  static bool ParseValue(std::string_view input, FFTConfig::Vendor* value,
                         std::string* reason) {
    if (input == "arkworks") {
      *value = FFTConfig::Vendor::kArkworks;
    } else if (input == "bellman") {
      *value = FFTConfig::Vendor::kBellman;
    } else if (input == "halo2") {
      *value = FFTConfig::Vendor::kHalo2;
    } else {
      *reason = absl::Substitute("Unknown vendor: $0", input);
      return false;
    }
    return true;
  }
};

}  // namespace base

// static
std::string FFTConfig::VendorToString(FFTConfig::Vendor vendor) {
  switch (vendor) {
    case FFTConfig::Vendor::kArkworks:
      return "arkworks";
    case FFTConfig::Vendor::kBellman:
      return "bellman";
    case FFTConfig::Vendor::kHalo2:
      return "halo2";
  }
  NOTREACHED();
  return "";
}

bool FFTConfig::Parse(int argc, char** argv, const Options& options) {
  base::FlagParser parser;
  // clang-format off
  parser.AddFlag<base::Flag<std::vector<size_t>>>(&exponents_)
      .set_short_name("-k")
      .set_required()
      .set_help("Specify the exponent 'k's where the degree of poly to test is 2·µè.");
  // clang-format on
  parser.AddFlag<base::BoolFlag>(&run_ifft_)
      .set_long_name("--run_ifft")
      .set_help("Run IFFT benchmark. Default is FFT benchmark.");
  parser.AddFlag<base::BoolFlag>(&check_results_)
      .set_long_name("--check_results")
      .set_help("Whether checks results generated by each fft runner.");
  if (options.include_vendors) {
    parser.AddFlag<base::Flag<std::vector<Vendor>>>(&vendors_)
        .set_long_name("--vendor")
        .set_help(
            "Vendors to be benchmarked with. (supported vendors: arkworks, "
            "bellman, halo2)");
  }
  {
    std::string error;
    if (!parser.Parse(argc, argv, &error)) {
      tachyon_cerr << error << std::endl;
      return false;
    }
  }

  base::ranges::sort(exponents_);  // NOLINT
  return true;
}

std::vector<size_t> FFTConfig::GetDegrees() const {
  return base::Map(exponents_,
                   [](size_t exponent) { return (size_t{1} << exponent) - 1; });
}

}  // namespace tachyon
